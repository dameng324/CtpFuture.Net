//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CtpFuture.Net {

public class CThostFtdcMdSpi : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CThostFtdcMdSpi(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CThostFtdcMdSpi obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CThostFtdcMdSpi obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~CThostFtdcMdSpi() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CTPFutureApiPINVOKE.delete_CThostFtdcMdSpi(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual void OnFrontConnected() {
    
  }

  public virtual void OnFrontDisconnected(int nReason) {
    
  }

  public virtual void OnHeartBeatWarning(int nTimeLapse) {
    
  }

  public virtual void OnRspUserLogin(CThostFtdcRspUserLoginField pRspUserLogin, CThostFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast) {
    
  }

  public virtual void OnRspUserLogout(CThostFtdcUserLogoutField pUserLogout, CThostFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast) {
    
  }

  public virtual void OnRspError(CThostFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast) {
    
  }

  public virtual void OnRspSubMarketData(CThostFtdcSpecificInstrumentField pSpecificInstrument, CThostFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast) {
    
  }

  public virtual void OnRspUnSubMarketData(CThostFtdcSpecificInstrumentField pSpecificInstrument, CThostFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast) {
    
  }

  public virtual void OnRspSubForQuoteRsp(CThostFtdcSpecificInstrumentField pSpecificInstrument, CThostFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast) {
    
  }

  public virtual void OnRspUnSubForQuoteRsp(CThostFtdcSpecificInstrumentField pSpecificInstrument, CThostFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast) {
    
  }

  public virtual void OnRtnDepthMarketData(CThostFtdcDepthMarketDataField pDepthMarketData) {
    
  }

  public virtual void OnRtnForQuoteRsp(CThostFtdcForQuoteRspField pForQuoteRsp) {
    
  }

  public CThostFtdcMdSpi() : this(CTPFutureApiPINVOKE.new_CThostFtdcMdSpi(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    
      swigDelegate0 = new SwigDelegateCThostFtdcMdSpi_0(SwigDirectorMethodOnFrontConnected);
    
      swigDelegate1 = new SwigDelegateCThostFtdcMdSpi_1(SwigDirectorMethodOnFrontDisconnected);
    
      swigDelegate2 = new SwigDelegateCThostFtdcMdSpi_2(SwigDirectorMethodOnHeartBeatWarning);
    
      swigDelegate3 = new SwigDelegateCThostFtdcMdSpi_3(SwigDirectorMethodOnRspUserLogin);
    
      swigDelegate4 = new SwigDelegateCThostFtdcMdSpi_4(SwigDirectorMethodOnRspUserLogout);
    
      swigDelegate5 = new SwigDelegateCThostFtdcMdSpi_5(SwigDirectorMethodOnRspError);
    
      swigDelegate6 = new SwigDelegateCThostFtdcMdSpi_6(SwigDirectorMethodOnRspSubMarketData);
    
      swigDelegate7 = new SwigDelegateCThostFtdcMdSpi_7(SwigDirectorMethodOnRspUnSubMarketData);
    
      swigDelegate8 = new SwigDelegateCThostFtdcMdSpi_8(SwigDirectorMethodOnRspSubForQuoteRsp);
    
      swigDelegate9 = new SwigDelegateCThostFtdcMdSpi_9(SwigDirectorMethodOnRspUnSubForQuoteRsp);
    
      swigDelegate10 = new SwigDelegateCThostFtdcMdSpi_10(SwigDirectorMethodOnRtnDepthMarketData);
    
      swigDelegate11 = new SwigDelegateCThostFtdcMdSpi_11(SwigDirectorMethodOnRtnForQuoteRsp);
    CTPFutureApiPINVOKE.CThostFtdcMdSpi_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11);
  }

  private void SwigDirectorMethodOnFrontConnected() {
    OnFrontConnected();
  }

  private void SwigDirectorMethodOnFrontDisconnected(int nReason) {
    OnFrontDisconnected(nReason);
  }

  private void SwigDirectorMethodOnHeartBeatWarning(int nTimeLapse) {
    OnHeartBeatWarning(nTimeLapse);
  }

  private void SwigDirectorMethodOnRspUserLogin(global::System.IntPtr pRspUserLogin, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast) {
    OnRspUserLogin((pRspUserLogin == global::System.IntPtr.Zero) ? null : new CThostFtdcRspUserLoginField(pRspUserLogin, false), (pRspInfo == global::System.IntPtr.Zero) ? null : new CThostFtdcRspInfoField(pRspInfo, false), nRequestID, bIsLast);
  }

  private void SwigDirectorMethodOnRspUserLogout(global::System.IntPtr pUserLogout, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast) {
    OnRspUserLogout((pUserLogout == global::System.IntPtr.Zero) ? null : new CThostFtdcUserLogoutField(pUserLogout, false), (pRspInfo == global::System.IntPtr.Zero) ? null : new CThostFtdcRspInfoField(pRspInfo, false), nRequestID, bIsLast);
  }

  private void SwigDirectorMethodOnRspError(global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast) {
    OnRspError((pRspInfo == global::System.IntPtr.Zero) ? null : new CThostFtdcRspInfoField(pRspInfo, false), nRequestID, bIsLast);
  }

  private void SwigDirectorMethodOnRspSubMarketData(global::System.IntPtr pSpecificInstrument, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast) {
    OnRspSubMarketData((pSpecificInstrument == global::System.IntPtr.Zero) ? null : new CThostFtdcSpecificInstrumentField(pSpecificInstrument, false), (pRspInfo == global::System.IntPtr.Zero) ? null : new CThostFtdcRspInfoField(pRspInfo, false), nRequestID, bIsLast);
  }

  private void SwigDirectorMethodOnRspUnSubMarketData(global::System.IntPtr pSpecificInstrument, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast) {
    OnRspUnSubMarketData((pSpecificInstrument == global::System.IntPtr.Zero) ? null : new CThostFtdcSpecificInstrumentField(pSpecificInstrument, false), (pRspInfo == global::System.IntPtr.Zero) ? null : new CThostFtdcRspInfoField(pRspInfo, false), nRequestID, bIsLast);
  }

  private void SwigDirectorMethodOnRspSubForQuoteRsp(global::System.IntPtr pSpecificInstrument, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast) {
    OnRspSubForQuoteRsp((pSpecificInstrument == global::System.IntPtr.Zero) ? null : new CThostFtdcSpecificInstrumentField(pSpecificInstrument, false), (pRspInfo == global::System.IntPtr.Zero) ? null : new CThostFtdcRspInfoField(pRspInfo, false), nRequestID, bIsLast);
  }

  private void SwigDirectorMethodOnRspUnSubForQuoteRsp(global::System.IntPtr pSpecificInstrument, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast) {
    OnRspUnSubForQuoteRsp((pSpecificInstrument == global::System.IntPtr.Zero) ? null : new CThostFtdcSpecificInstrumentField(pSpecificInstrument, false), (pRspInfo == global::System.IntPtr.Zero) ? null : new CThostFtdcRspInfoField(pRspInfo, false), nRequestID, bIsLast);
  }

  private void SwigDirectorMethodOnRtnDepthMarketData(global::System.IntPtr pDepthMarketData) {
    OnRtnDepthMarketData((pDepthMarketData == global::System.IntPtr.Zero) ? null : new CThostFtdcDepthMarketDataField(pDepthMarketData, false));
  }

  private void SwigDirectorMethodOnRtnForQuoteRsp(global::System.IntPtr pForQuoteRsp) {
    OnRtnForQuoteRsp((pForQuoteRsp == global::System.IntPtr.Zero) ? null : new CThostFtdcForQuoteRspField(pForQuoteRsp, false));
  }

  public delegate void SwigDelegateCThostFtdcMdSpi_0();
  public delegate void SwigDelegateCThostFtdcMdSpi_1(int nReason);
  public delegate void SwigDelegateCThostFtdcMdSpi_2(int nTimeLapse);
  public delegate void SwigDelegateCThostFtdcMdSpi_3(global::System.IntPtr pRspUserLogin, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast);
  public delegate void SwigDelegateCThostFtdcMdSpi_4(global::System.IntPtr pUserLogout, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast);
  public delegate void SwigDelegateCThostFtdcMdSpi_5(global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast);
  public delegate void SwigDelegateCThostFtdcMdSpi_6(global::System.IntPtr pSpecificInstrument, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast);
  public delegate void SwigDelegateCThostFtdcMdSpi_7(global::System.IntPtr pSpecificInstrument, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast);
  public delegate void SwigDelegateCThostFtdcMdSpi_8(global::System.IntPtr pSpecificInstrument, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast);
  public delegate void SwigDelegateCThostFtdcMdSpi_9(global::System.IntPtr pSpecificInstrument, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast);
  public delegate void SwigDelegateCThostFtdcMdSpi_10(global::System.IntPtr pDepthMarketData);
  public delegate void SwigDelegateCThostFtdcMdSpi_11(global::System.IntPtr pForQuoteRsp);

  private SwigDelegateCThostFtdcMdSpi_0 swigDelegate0;
  private SwigDelegateCThostFtdcMdSpi_1 swigDelegate1;
  private SwigDelegateCThostFtdcMdSpi_2 swigDelegate2;
  private SwigDelegateCThostFtdcMdSpi_3 swigDelegate3;
  private SwigDelegateCThostFtdcMdSpi_4 swigDelegate4;
  private SwigDelegateCThostFtdcMdSpi_5 swigDelegate5;
  private SwigDelegateCThostFtdcMdSpi_6 swigDelegate6;
  private SwigDelegateCThostFtdcMdSpi_7 swigDelegate7;
  private SwigDelegateCThostFtdcMdSpi_8 swigDelegate8;
  private SwigDelegateCThostFtdcMdSpi_9 swigDelegate9;
  private SwigDelegateCThostFtdcMdSpi_10 swigDelegate10;
  private SwigDelegateCThostFtdcMdSpi_11 swigDelegate11;
}

}
